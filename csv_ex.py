# Write a python function parse_csv 
# to parse csv (comma separated values) files.

# generalise with any delimeter 
# and avoid comments starts with #

def parse_csv(filename, delimeter,comment):
    f = open(filename,'r')
    content_list = []
    for line in f.readlines():
        if line.startswith('#'): continue
        content_list.append(line.strip('\n').split(delimeter))
    f.close()
    return content_list

#print(parse_csv('a.csv','!','#'))

# Write a function mutate to compute all words generated by a 
# single mutation on a given word. A mutation is defined as 
# inserting a character, deleting a character, replacing a character, 
# or swapping 2 consecutive characters in a string. 
# For simplicity consider only letters from a to z

def mutate(text):
    import copy
    mutate_set= set()
    alphabets = 'abcdefghijklmnopqrstuvwxyz'
    for i in range(len(text)):
        mutate_set.add(text.replace(text[i],'',1))  # deleting
        if i < len(text)-1 :
            mutate_set.add(text[:i]+text[i+1]+text[i]+text[i+2:]) # to swap 
        for alphabet in alphabets:
           mutate_set.add(text[:i]+alphabet+text[i:]) # inserting
           mutate_set.add(text.replace(text[i],alphabet,1)) # replacing
    return mutate_set

#print(mutate('hello'))
word = mutate('hello')
#print('helol' in word)

#  Write a function nearly_equal to test whether two strings are nearly equal. 
# Two strings a and b are nearly equal when a can be generated by a single mutation on b.
def nearly_equal(a,b): return b in mutate(a)
#print(nearly_equal('python','jython'))



